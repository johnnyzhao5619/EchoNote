name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.2.0)"
        required: true
        type: string

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        run: pytest tests/ -v

      - name: Run quality checks
        run: |
          black --check .
          isort --check .
          flake8 .

  build:
    name: Build ${{ matrix.os }}
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: echonote-linux
            build_script: build_linux.py
          - os: windows-latest
            artifact_name: echonote-windows
            build_script: build_windows.py
          - os: macos-latest
            artifact_name: echonote-macos
            build_script: build_macos.py

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev portaudio19-dev libpulse-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install portaudio create-dmg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pyinstaller

      - name: Build application
        run: python scripts/${{ matrix.build_script }} --clean

      - name: Create DMG (macOS only)
        if: matrix.os == 'macos-latest'
        run: python scripts/${{ matrix.build_script }} --dmg

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/*
          retention-days: 90

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Extract release notes from RELEASE_NOTES if exists
          if [ -f "RELEASE_NOTES_${VERSION}.md" ]; then
            cat "RELEASE_NOTES_${VERSION}.md" > release_notes.md
          else
            echo "Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "## Changes" >> release_notes.md
            git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify release
        run: |
          echo "âœ… Release ${{ steps.release_notes.outputs.version }} created successfully!"
          echo "ðŸ“¦ Artifacts uploaded to GitHub Releases"
