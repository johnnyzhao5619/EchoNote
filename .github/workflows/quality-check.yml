name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Install quality analysis tools
      run: |
        pip install pylint flake8 mypy bandit radon xenon
        
    - name: Run internationalization analysis
      run: |
        python scripts/analyze_i18n.py --format=json --output-dir=reports
        
    - name: Run code quality analysis
      run: |
        python scripts/analyze_quality.py --format=json --output-dir=reports
        
    - name: Run static analysis
      run: |
        # Run individual tools for detailed output
        echo "Running pylint..."
        pylint ui core engines utils data --output-format=text --reports=no || true
        
        echo "Running flake8..."
        flake8 ui core engines utils data --max-line-length=100 || true
        
        echo "Running mypy..."
        mypy ui core engines utils data --ignore-missing-imports || true
        
        echo "Running bandit..."
        bandit -r ui core engines utils data -f json || true
        
    - name: Check code complexity
      run: |
        echo "Running radon complexity check..."
        radon cc ui core engines utils data --min=C || true
        
        echo "Running xenon complexity check..."
        xenon --max-absolute=C --max-modules=B --max-average=A ui core engines utils data || true
        
    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports
        path: reports/
        retention-days: 30
        
    - name: Comment PR with quality summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Read quality report if it exists
            const reportPath = 'reports/quality_analysis_report.json';
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const summary = report.summary;
              const qualityScore = report.quality_score;
              
              const statusEmoji = {
                'excellent': 'üü¢',
                'good': 'üü°', 
                'fair': 'üü†',
                'needs_improvement': 'üî¥'
              };
              
              const emoji = statusEmoji[summary.overall_status] || '‚ö™';
              
              const comment = `## üîç Code Quality Report
              
**Overall Status**: ${emoji} ${summary.overall_status.replace('_', ' ')}
**Quality Score**: ${qualityScore.score}/100 (Grade: ${qualityScore.grade})

### Summary
- **Files Analyzed**: ${summary.total_files_analyzed}
- **Static Issues**: ${summary.total_static_issues}
- **High Complexity**: ${summary.high_complexity_items}
- **Duplicate Code**: ${(summary.duplicate_code_ratio * 100).toFixed(1)}%

### Priority Actions
${summary.priority_actions.map((action, i) => `${i + 1}. ${action}`).join('\n')}

üìä [View detailed reports in artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not post quality report comment:', error);
          }

  i18n-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check internationalization
      run: |
        python scripts/analyze_i18n.py --format=markdown --output-dir=reports
        
    - name: Check for hardcoded strings
      run: |
        # Run a quick check for obvious hardcoded strings
        echo "Checking for hardcoded strings in UI files..."
        
        # Look for setText calls with string literals
        if grep -r "\.setText([\"']" ui/ --include="*.py"; then
          echo "‚ùå Found potential hardcoded strings in setText calls"
          exit 1
        fi
        
        # Look for setWindowTitle calls with string literals  
        if grep -r "\.setWindowTitle([\"']" ui/ --include="*.py"; then
          echo "‚ùå Found potential hardcoded strings in setWindowTitle calls"
          exit 1
        fi
        
        # Look for QMessageBox calls with string literals
        if grep -r "QMessageBox\." ui/ --include="*.py" | grep -E "[\"'][^\"']*[\"']"; then
          echo "‚ùå Found potential hardcoded strings in QMessageBox calls"
          exit 1
        fi
        
        echo "‚úÖ No obvious hardcoded strings found"
        
    - name: Upload i18n reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: i18n-reports
        path: reports/
        retention-days: 30

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30