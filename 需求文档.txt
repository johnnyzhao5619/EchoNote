### 项目需求文档 (V2.0)

1. 项目概述

开发一款名为 "EchoNote" (暂定名) 的桌面端智能语音工具，旨在为用户提供高效、精准的语音转录、翻译和管理功能。应用将采用现代化的UI设计，并支持跨平台部署 (Windows 和 macOS)。

2. 核心功能模块

- 2.1. 语音文件批量转录
  - 功能描述: 将本地音频/视频文件转换为文本文档。
  - 核心要求:
    - 支持导入单个文件、多个文件以及整个文件夹。
    - 维护一个转录任务队列，并按顺序依次处理，可设置每次执行转录任务的数量。
    - 实时显示每个任务的转录进度。
    - 转录时同时生成支持转换为全部文本格式的文本，转录结束后用户可自定义输出文本的格式（如 .txt, .srt, .md）。 转录完成后提供状态通知。 
    - 转录完成后提供状态通知。

- 2.2. 实时语音转录与翻译

  - 功能描述: 实时捕捉音频输入，在录制音频的同时将音频转录为文本，同时提供可选的实时翻译功能。 
  - 核心要求:
    - 允许用户选择音频输入源（物理麦克风、系统音频环回等），并支持增益调整功能。
    - 实时在界面上显示转录的文本。
    - 实时显示翻译后的文本（如果启用）。
    - 支持用户动态切换源语言和目标翻译语言。
    - 录制结束后，可将转录和翻译的文本导出为文件。
    - 提供录制功能，可将原始音频保存为文件。（在点击转译功能之后，同时录制录音）
    - 以录制的开始时间和结束时间，在日历中心和智能时间线与历史追溯中创建一个默认的记录，用于记录这个录音事件。

- 2.3. 统一日历中心 (Unified Calendar Hub)
  - 功能描述: 提供一个以本地日历为核心、同时支持外部日历服务（Google, Outlook）作为数据同步源的集成日历中心。
  - 核心要求:
    - 本地优先原则:
      - 应用的核心是一个独立的本地日历系统。所有事件的创建、编辑和删除操作**首先在本地数据库完成**，确保核心功能的离线可用性和数据所有权。
      - 创建本地事件应参照 Google 日历中的实现方式，创建至少包括Title、类型（Event/Task/Appointment）、开始时间和结束时间、location、参会人员等信息。
    - 外部事件同步 (单向):
      - 用户可以授权并连接其 Google 或 Outlook 账户。
      - 连接后，应用会自动将外部日历的事件**同步到本地**，并在统一的日历视图中展示。这些同步下来的事件在本地为只读状态，以避免数据冲突。
    - 可选的向上同步:
      - 当用户在应用内**创建新事件**时，如果已连接了外部日历账户，UI界面应提供一个明确的选项（如复选框），询问用户“是否将此事件同步到 Google/Outlook 日历？”。
      - 如果用户选择同步，该事件在本地创建成功后，将被**推送**到指定的外部日历服务中。
    - 统一视图与区分:
      - 在单一的日历界面（支持月、周、日视图）中，合并显示所有本地创建的事件和从外部同步的事件。
      - 不同来源的事件应通过独特的颜色或图标进行清晰区分，方便用户识别。
    - 安全的外部账户授权:
      - 提供清晰、安全的用户引导流程，通过 OAuth 2.0 等标准协议授权和连接用户的 Google 或 Outlook 账户。可参照google或outlook的标准授权流程。并提供友好的授权配置交互。
    - 实时语音转录与翻译功能
      - 根据日历中的事件，自动规划/启动 录音以及实时语音转录与翻译功能: 根据日历中的记录，可规划会议录制以及实时语音转录与翻译的任务。

- 2.4. 智能时间线与历史追溯 (Intelligent Timeline & History Tracking)
  - 功能描述: 以当前时间为锚点，打造一个垂直滚动的时间线视图。该视图不仅是未来的任务规划板，也是过去所有会议产物（录音、文稿）的回溯入口。
  - 核心要求：
    - “现在”实时指示器: 界面中始终有一条清晰的“当前时间”标记线，作为过去与未来的分界。
    - 未来事件规划 (向下滚动):
      - 清晰列出所有即将发生的会议和事件。
      - 每个事件卡片上都提供一键式任务开关：`[开启实时转录]` 和 `[开启会议录音]`。
      - 用户可以为未来的任何会议预先设定任务，应用将在会议开始时自动执行，并在开始前发送桌面通知提醒。
    - 历史事件回溯 (向上滚动):
      - 按时间倒序展示所有已结束的会议和事件。
      - 如果某事件关联了转录或录音，其卡片上将直接显示对应的图标或链接，用户点击即可快速查看文稿或播放在线录音。
      - 提供强大的全局搜索功能，允许用户根据关键词、日期、参与人等条件，快速定位到特定的历史事件及其所有关联的数字资产。

- 2.5. 设置界面
  - 功能描述：提供各个部分功能的统一设置页面，支持对上述4个主要功能以及相关功能的设置。并提供主题切换 和 多语言切换（初步支持英文、中文以及法语）

3. 技术与架构要求

- 3.1. 桌面端框架:
  - 采用pyqt等开源前端构建前端界面。
  - 后端逻辑由 Python 驱动。

- 3.2. UI/UX 设计:
  - 整体界面布局和风格参考 Microsoft Teams 或 Slack，采用“侧边栏导航 + 主内容区”的经典布局和配色方案。
  - 应用界面需支持多语言切换（初期支持中文、英文、法语）。

- 3.3. 语音识别引擎:
  - 采用可插拔式架构，支持多种引擎。
  - 默认本地引擎: `faster-whisper`。实现方式可参照：https://github.com/QuentinFuxa/WhisperLiveKit 项目，以及 https://github.com/SYSTRAN/faster-whisper 项目
  - 支持扩展:
    - 云服务: 支持主流云语音API（如 OpenAI, Google, Azure），用户需自行配置 API Key，并提供基础的计费功能，用于显示费用以及API Key的配置工具
    - 其他本地模型: 支持集成其他免费本地模型（如 Vosk, Coqui STT）。

- 3.4. 打包与分发:
  - 应用必须能被打包成独立的 `.exe` (Windows) 和 `.app` (macOS) 文件。
  - 安装包需经过代码签名，以满足主流操作系统的安全要求，避免被误报为病毒。

4. 非功能性需求
- 性能: 应用在进行转录任务时不应过度占用系统资源，导致系统卡顿。
- 稳定性: 应用应运行稳定，能够处理异常情况（如文件格式不支持等）。
- 安全性: 用户的 API Key 和日历授权 Token 等敏感信息必须在本地安全存储。
- 可维护性: 代码结构需清晰，遵循 DRY 原则，模块化设计，便于未来扩展和维护。
