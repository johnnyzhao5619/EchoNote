[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "echonote"
version = "1.1.0"
description = "Local-first desktop application for intelligent voice transcription and calendar management"
license = {text = "Apache-2.0"}
authors = [{name = "EchoNote Contributors"}]
requires-python = ">=3.10"
dependencies = [
    "PySide6>=6.6.0",
    "faster-whisper>=0.10.0",
    "torch>=2.0.0",
    "httpx>=0.25.0",
    "requests>=2.31.0",
    "authlib>=1.2.0",
    "cryptography>=41.0.0",
    "APScheduler>=3.10.0",
    "psutil>=5.9.0",
    "soundfile>=0.12.0",
    "librosa>=0.10.0",
    "PyAudio>=0.2.11",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-qt>=4.2.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit[toml]>=1.7.5",
    "PySide6-stubs>=6.5.0",
    "PyInstaller>=5.13.0",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["core", "engines", "data", "ui", "utils", "config"]
known_third_party = ["PySide6", "faster_whisper", "torch", "httpx", "requests", "authlib", "cryptography"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "faster_whisper.*",
    "torch.*",
    "torchaudio.*",
    "librosa.*",
    "soundfile.*",
    "webrtcvad.*",
    "PyAudio.*",
    "psutil.*",
]
ignore_missing_imports = true

# Flake8 configuration
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [".venv", "venv", "build", "dist", ".git", "__pycache__", "*.egg-info"]
per-file-ignores = [
    "__init__.py:F401",  # Allow unused imports in __init__.py files
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args for tests

# Coverage configuration
[tool.coverage.run]
source = ["core", "engines", "data", "ui", "utils", "config"]
omit = [
    "tests/*",
    ".venv/*",
    "venv/*",
    "build/*",
    "dist/*",
    "*/migrations/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Interrogate configuration (docstring coverage)
[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests", ".venv", "venv"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "ui: marks tests as UI tests requiring display",
    "network: marks tests that require network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]